## Pseudoclassical

Given the direct link between the `Male` and `Human` prototype, if Human has many children inheriting from it, any change on a child’s prototype properties will affect `Human`, and thus all children inheriting from `Human`. Changing a child’s prototype should not affect other children inheriting from the same parent. The reason for this is because JavaScript passes objects by reference, not by value, meaning all children of `Human` inherit changes occurred on other children’s prototypes.

`childObj.prototype = parentObj.prototype` does give us inheritance. However, if you want to fix the issue above, you need to replace the `extendObj` function to take the child’s prototype and link it to a temporary object, whose prototype is the parent object’s prototype. In this way, by creating a temporary “middle” object, you allow the temporary object to be empty and inherit its properties from `Human`.

By doing this, you have solved the pass by reference issue with a new instance of an empty object, which still inherits from the parent, but is not affected by other children.

To understand this clearly, the image below shows the flow of the `extendObj` function.

![Classical Inheritance](http://davidshariff.com/blog/images/classical_inheritance.png)

## Functional

As you can see by using this pattern, there is no need to use the prototype chain, constructors or the “new” keyword. Functional inheritance achieves this by passing a unique object around every time an instance of the function is called.

This however, has a downside for performance because each object is unique, meaning each function call creates a new object, so the JavaScript interpreter has to assign new memory to the function in order to recompile everything inside of it as unique again.

There are also benefits to this approach, as the closures of each function allow for good use of public and private methods / attributes. `functional2.js` shows a parent class of vehicle and children classes of `motorbike` and `boat`.

You can see that it is fairly easy to provide encapsulation. The `_privateObj` can not be modified from outside of the object, unless exposed by a public method like increaseWheels(). Similarly, private values can also only be read when exposed by a public method, such as motorbike’s `totalNumWheels()` function.